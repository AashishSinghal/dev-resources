// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider             = "postgresql"
  url                  = env("DATABASE_URL")
  // url                  = env("SHADOW_DATABASE_URL")
}

model Example {
  id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  roles         Role
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Recource {
  id          Int      @id @default(autoincrement())
  url         String
  title       String?
  siteName    String?
  description String?
  images      String?
  mediaType   String?
  videos      String?
  favicons    String?
  //   tags        Tag?
  metadata    Boolean?

  @@unique([url])
}

model Tag {
  id         String    @id @default(cuid())
  name       String
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
}

model Category {
  id   String @id @default(cuid())
  name String
  tags Tag[]
}

enum Role {
  USER
  ADMIN
  DEVELOPER
}
